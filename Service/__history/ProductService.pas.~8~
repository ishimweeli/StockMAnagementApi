unit ProductService;

interface

uses
  ProductModel,
  DatabaseModule,
  System.SysUtils,
  System.Generics.Collections,
  FireDAC.Comp.Client,
  FireDAC.Stan.Param;

type
  TStockNotification = (snNone, snLowQuantity, snCriticalQuantity);

  EProductServiceError = class(Exception);

  TProductService = class
  private
    function CheckQuantityStatus(const CurrentQuantity, InitialQuantity: Integer): TStockNotification;
    function ItemExists(const ItemId: Integer; out CurrentQuantity: Integer;
      out InitialQuantity: Integer): Boolean;
    procedure CreateNotification(const ItemId: Integer; const ItemName: string;
      const NotificationType: TNotificationType; const Message: string);
    function GetInitialQuantity(const ItemId: Integer): Integer;
  public
    function AddItem(const Item: TItem): Boolean;
    function UpdateItem(const ItemId: Integer; const Item: TItem): Boolean;
    function DeleteItem(const ItemId: Integer): Boolean;
    function SellItem(const ItemId: Integer; const Quantity: Integer): TStockNotification;
    function GetAllItems: TObjectList<TItem>;
    function GetItemById(const ItemId: Integer): TItem;
    function GetNotifications: TObjectList<TNotification>;
  end;

implementation

function TProductService.ItemExists(const ItemId: Integer; out CurrentQuantity: Integer;
  out InitialQuantity: Integer): Boolean;
var
  Query: TFDQuery;
begin
  Result := False;
  CurrentQuantity := 0;
  InitialQuantity := 0;
  Query := DatabaseModule1.CreateQuery;
  try
    Query.SQL.Text :=
      'SELECT quantity, initial_quantity FROM products WHERE id = :id';
    Query.ParamByName('id').AsInteger := ItemId;
    Query.Open;

    if not Query.IsEmpty then
    begin
      Result := True;
      CurrentQuantity := Query.FieldByName('quantity').AsInteger;
      InitialQuantity := Query.FieldByName('initial_quantity').AsInteger;
    end;
  finally
    Query.Free;
  end;
end;

function TProductService.GetInitialQuantity(const ItemId: Integer): Integer;
var
  Query: TFDQuery;
begin
  Result := 0;
  Query := DatabaseModule1.CreateQuery;
  try
    Query.SQL.Text := 'SELECT initial_quantity FROM products WHERE id = :id';
    Query.ParamByName('id').AsInteger := ItemId;
    Query.Open;
    if not Query.IsEmpty then
      Result := Query.FieldByName('initial_quantity').AsInteger;
  finally
    Query.Free;
  end;
end;

function TProductService.CheckQuantityStatus(const CurrentQuantity, InitialQuantity: Integer): TStockNotification;
var
  Percentage: Double;
begin
  if InitialQuantity > 0 then
    Percentage := (CurrentQuantity / InitialQuantity) * 100
  else
    Percentage := 0;

  if Percentage <= 5 then
    Result := snCriticalQuantity
  else if Percentage <= 25 then
    Result := snLowQuantity
  else
    Result := snNone;
end;

procedure TProductService.CreateNotification(const ItemId: Integer; const ItemName: string;
  const NotificationType: TNotificationType; const Message: string);
var
  Query: TFDQuery;
begin
  Query := DatabaseModule1.CreateQuery;
  try
    Query.SQL.Text :=
      'INSERT INTO notifications (product_id, product_name, notification_type, message) ' +
      'VALUES (:product_id, :product_name, :notification_type, :message)';
    Query.ParamByName('product_id').AsInteger := ItemId;
    Query.ParamByName('product_name').AsString := ItemName;
    Query.ParamByName('notification_type').AsInteger := Ord(NotificationType);
    Query.ParamByName('message').AsString := Message;
    Query.ExecSQL;
  finally
    Query.Free;
  end;
end;

function TProductService.AddItem(const Item: TItem): Boolean;
var
  Query: TFDQuery;
begin
  Result := False;
  if Item.Quantity < 0 then
    raise EProductServiceError.Create('Quantity cannot be negative');

  if Item.Price <= 0 then
    raise EProductServiceError.Create('Price must be greater than zero');

  Query := DatabaseModule1.CreateQuery;
  try
    DatabaseModule1.StartTransaction;
    try
      Query.SQL.Text := 'INSERT INTO products (name, quantity, price) VALUES (:name, :quantity, :price)';
      Query.ParamByName('name').AsString := Item.Name;
      Query.ParamByName('quantity').AsInteger := Item.Quantity;
      Query.ParamByName('price').AsFloat := Item.Price;
      Query.ExecSQL;

      DatabaseModule1.Commit;
      Result := True;
    except
      DatabaseModule1.Rollback;
      raise;
    end;
  finally
    Query.Free;
  end;
end;

function TProductService.UpdateItem(const ItemId: Integer; const Item: TItem): Boolean;
var
  Query: TFDQuery;
  CurrentQuantity, InitialQuantity: Integer;
begin
  Result := False;

  if not ItemExists(ItemId, CurrentQuantity, InitialQuantity) then
    raise EProductServiceError.Create('Item not found');

  if Item.Quantity < 0 then
    raise EProductServiceError.Create('Quantity cannot be negative');

  if Item.Price <= 0 then
    raise EProductServiceError.Create('Price must be greater than zero');

  Query := DatabaseModule1.CreateQuery;
  try
    DatabaseModule1.StartTransaction;
    try
      Query.SQL.Text := 'UPDATE products SET name = :name, quantity = :quantity, price = :price WHERE id = :id';
      Query.ParamByName('name').AsString := Item.Name;
      Query.ParamByName('quantity').AsInteger := Item.Quantity;
      Query.ParamByName('price').AsFloat := Item.Price;
      Query.ParamByName('id').AsInteger := ItemId;
      Query.ExecSQL;

      // Check if we need to create notifications after update
      if Item.Quantity <> CurrentQuantity then
      begin
        var NotificationStatus := CheckQuantityStatus(Item.Quantity, InitialQuantity);
        case NotificationStatus of
          snLowQuantity:
            CreateNotification(ItemId, Item.Name, ntLowStock,
              Format('Product "%s" quantity less than a quarter of initial stock (%d%%)',
                [Item.Name, Round((Item.Quantity / InitialQuantity) * 100)]));
          snCriticalQuantity:
            CreateNotification(ItemId, Item.Name, ntCriticalStock,
              Format('Product "%s" quantity nearing zero (%d%%)',
                [Item.Name, Round((Item.Quantity / InitialQuantity) * 100)]));
        end;
      end;

      DatabaseModule1.Commit;
      Result := True;
    except
      DatabaseModule1.Rollback;
      raise;
    end;
  finally
    Query.Free;
  end;
end;

function TProductService.DeleteItem(const ItemId: Integer): Boolean;
var
  Query: TFDQuery;
  CurrentQuantity, InitialQuantity: Integer;
begin
  Result := False;

  if not ItemExists(ItemId, CurrentQuantity, InitialQuantity) then
    raise EProductServiceError.Create('Item not found');

  Query := DatabaseModule1.CreateQuery;
  try
    DatabaseModule1.StartTransaction;
    try
      Query.SQL.Text := 'DELETE FROM products WHERE id = :id';
      Query.ParamByName('id').AsInteger := ItemId;
      Query.ExecSQL;

      DatabaseModule1.Commit;
      Result := True;
    except
      DatabaseModule1.Rollback;
      raise;
    end;
  finally
    Query.Free;
  end;
end;

function TProductService.SellItem(const ItemId: Integer; const Quantity: Integer): TStockNotification;
var
  Query: TFDQuery;
  CurrentQuantity, InitialQuantity: Integer;
  Item: TItem;
begin
  Result := snNone;

  if Quantity <= 0 then
    raise EProductServiceError.Create('Quantity must be greater than zero');

  if not ItemExists(ItemId, CurrentQuantity, InitialQuantity) then
    raise EProductServiceError.Create('Item not found');

  if CurrentQuantity < Quantity then
    raise EProductServiceError.Create('Insufficient stock');

  Item := GetItemById(ItemId);
  try
    Query := DatabaseModule1.CreateQuery;
    try
      DatabaseModule1.StartTransaction;
      try
        Query.SQL.Text := 'UPDATE products SET quantity = quantity - :sold WHERE id = :id';
        Query.ParamByName('sold').AsInteger := Quantity;
        Query.ParamByName('id').AsInteger := ItemId;
        Query.ExecSQL;

        // Calculate new quantity for notification check
        var NewQuantity := CurrentQuantity - Quantity;
        Result := CheckQuantityStatus(NewQuantity, InitialQuantity);

        case Result of
          snLowQuantity:
            CreateNotification(ItemId, Item.Name, ntLowStock,
              Format('Product "%s" quantity less than a quarter of initial stock (%d%%)',
                [Item.Name, Round((NewQuantity / InitialQuantity) * 100)]));
          snCriticalQuantity:
            CreateNotification(ItemId, Item.Name, ntCriticalStock,
              Format('Product "%s" quantity nearing zero (%d%%)',
                [Item.Name, Round((NewQuantity / InitialQuantity) * 100)]));
        end;

        DatabaseModule1.Commit;
      except
        DatabaseModule1.Rollback;
        raise;
      end;
    finally
      Query.Free;
    end;
  finally
    Item.Free;
  end;
end;

function TProductService.GetAllItems: TObjectList<TItem>;
var
  Query: TFDQuery;
  Item: TItem;
begin
  Result := TObjectList<TItem>.Create(True);
  Query := DatabaseModule1.CreateQuery;
  try
    Query.SQL.Text :=
      'SELECT id, name, quantity, price, initial_quantity ' +
      'FROM products ORDER BY name';
    Query.Open;

    while not Query.Eof do
    begin
      Item := TItem.Create;
      Item.Id := Query.FieldByName('id').AsInteger;
      Item.Name := Query.FieldByName('name').AsString;
      Item.Quantity := Query.FieldByName('quantity').AsInteger;
      Item.Price := Query.FieldByName('price').AsFloat;
      Item.InitialQuantity := Query.FieldByName('initial_quantity').AsInteger;
      Result.Add(Item);
      Query.Next;
    end;
  finally
    Query.Free;
  end;
end;

function TProductService.GetItemById(const ItemId: Integer): TItem;
var
  Query: TFDQuery;
begin
  Result := nil;
  Query := DatabaseModule1.CreateQuery;
  try
    Query.SQL.Text :=
      'SELECT id, name, quantity, price, initial_quantity ' +
      'FROM products WHERE id = :id';
    Query.ParamByName('id').AsInteger := ItemId;
    Query.Open;

    if not Query.IsEmpty then
    begin
      Result := TItem.Create;
      Result.Id := Query.FieldByName('id').AsInteger;
      Result.Name := Query.FieldByName('name').AsString;
      Result.Quantity := Query.FieldByName('quantity').AsInteger;
      Result.Price := Query.FieldByName('price').AsFloat;
      Result.InitialQuantity := Query.FieldByName('initial_quantity').AsInteger;
    end;
  finally
    Query.Free;
  end;
end;

function TProductService.GetNotifications: TObjectList<TNotification>;
var
  Query: TFDQuery;
  Notification: TNotification;
begin
  Result := TObjectList<TNotification>.Create(True);
  Query := DatabaseModule1.CreateQuery;
  try
    Query.SQL.Text :=
      'SELECT n.*, p.name as product_name ' +
      'FROM notifications n ' +
      'LEFT JOIN products p ON n.product_id = p.id ' +
      'ORDER BY n.created_at DESC';
    Query.Open;

    while not Query.Eof do
    begin
      Notification := TNotification.Create;
      Notification.Id := Query.FieldByName('id').AsInteger;
      Notification.ProductId := Query.FieldByName('product_id').AsInteger;
      Notification.ProductName := Query.FieldByName('product_name').AsString;
      Notification.NotificationType := TNotificationType(Query.FieldByName('notification_type').AsInteger);
      Notification.Message := Query.FieldByName('message').AsString;
      Notification.CreatedAt := Query.FieldByName('created_at').AsDateTime;
      Result.Add(Notification);
      Query.Next;
    end;
  finally
    Query.Free;
  end;
end;

end.
