program StockManagementApi;
{$APPTYPE CONSOLE}

uses
  System.SysUtils,
  System.JSON,
  Horse,
  Horse.Jhonson,
  Horse.JWT,
  Horse.BasicAuthentication,
  Horse.CORS,
  JOSE.Core.JWT,
  JOSE.Core.Builder,
  JOSE.Core.JWA,
  JOSE.Types.JSON,
  FireDAC.Stan.Param,
  DatabaseModule in 'DatabaseModule.pas',
  UserModel in 'Models\UserModel.pas',
  ProductModel in 'Models\ProductModel.pas',
  UserService in 'Service\UserService.pas',
  ProductService in 'Service\ProductService.pas',
  UserController in 'Controller\UserController.pas',
  ProductController in 'Controller\ProductController.pas',
  JsonResponseHelper in 'Utils\JsonResponseHelper.pas',
  JWTManager in 'Utils\JWTManager.pas',
  CORSMiddleware in 'Middleware\CORSMiddleware.pas',
  NotificationModel in 'Models\NotificationModel.pas';

const
  JWT_SECRET_KEY = 'your-secret-key-here'; // Move this to a secure configuration later

resourcestring
  ERR_NO_TOKEN = 'No authorization token provided';
  ERR_UNAUTHORIZED = 'Unauthorized: Insufficient role permissions';
  ERR_INVALID_TOKEN = 'Invalid or expired token';

type
  TNextProc = TProc;

procedure RoleMiddleware(Req: THorseRequest; Res: THorseResponse; Next: TNextProc;
  RequiredRole: TUserRole);
var
  Token: string;
  Claims: TJWTClaims;
  TokenRole: TUserRole;
  JWT: TJWT;
  IsTokenValid: Boolean;
begin
  Token := Req.Headers['Authorization'];
  if Token.IsEmpty then
  begin
    Res.Status(THTTPStatus.Unauthorized);
    Res.Send<TJSONObject>(
      TJSONObject.Create.AddPair('error', ERR_NO_TOKEN));
    Exit;
  end;

  if Token.StartsWith('Bearer ', True) then
    Token := Token.Substring(7);

  try
    JWT := TJOSE.Builder
      .SetKey(TJOSEBytes.InitFromString(JWT_SECRET_KEY))
      .SetAlgorithm(TJOSEAlgorithmId.HS256)
      .CompactToken(Token)
      .Build;

    try
      IsTokenValid := JWT.Verified and (JWT.Claims.Expiration > Now);

      if not IsTokenValid then
      begin
        Res.Status(THTTPStatus.Unauthorized);
        Res.Send<TJSONObject>(
          TJSONObject.Create.AddPair('error', ERR_INVALID_TOKEN));
        Exit;
      end;

      try
        TokenRole := TUserRole(
          (JWT.Claims.JSON.GetValue('role') as TJSONNumber).AsInt
        );
      except
        Res.Status(THTTPStatus.Unauthorized);
        Res.Send<TJSONObject>(
          TJSONObject.Create.AddPair('error', 'Invalid role in token'));
        Exit;
      end;

      if (TokenRole = urAdmin) or (TokenRole = RequiredRole) then
        Next()
      else
      begin
        Res.Status(THTTPStatus.Forbidden);
        Res.Send<TJSONObject>(
          TJSONObject.Create.AddPair('error', ERR_UNAUTHORIZED));
      end;

    finally
      JWT.Free;
    end;

  except
    on E: Exception do
    begin
      Res.Status(THTTPStatus.Unauthorized);
      Res.Send<TJSONObject>(
        TJSONObject.Create.AddPair('error', 'Token validation error: ' + E.Message));
    end;
  end;
end;

procedure AuthMiddleware(Req: THorseRequest; Res: THorseResponse; Next: TNextProc);
var
  Token: string;
  Claims: TJWTClaims;
begin
  Token := Req.Headers['Authorization'];
  if Token.IsEmpty then
  begin
    Res.Status(THTTPStatus.Unauthorized);
    Res.Send<TJSONObject>(
      TJSONObject.Create.AddPair('error', ERR_NO_TOKEN));
    Exit;
  end;

  if Token.StartsWith('Bearer ', True) then
    Token := Token.Substring(7);

  try
    if not TJWTManager.ValidateToken(Token, Claims) then
    begin
      Res.Status(THTTPStatus.Unauthorized);
      Res.Send<TJSONObject>(
        TJSONObject.Create.AddPair('error', ERR_INVALID_TOKEN));
      Exit;
    end;
    Next();
  except
    Res.Status(THTTPStatus.Unauthorized);
    Res.Send<TJSONObject>(
      TJSONObject.Create.AddPair('error', ERR_INVALID_TOKEN));
  end;
end;

procedure ConfigurePublicRoutes(App: THorse; AuthController: TAuthController);
begin
  App.Post('/auth/register',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      AuthController.Register(Req, Res);
    end);

  App.Post('/auth/login',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      AuthController.Login(Req, Res);
    end);
end;

procedure ConfigureUserRoutes(App: THorse; AuthController: TAuthController);
begin
  App.Get('/users/:id',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      AuthController.GetUserProfile(Req, Res);
    end);

  App.Put('/users/:id',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      AuthController.UpdateUserProfile(Req, Res);
    end);
end;

procedure ConfigureAdminRoutes(App: THorse; ProductController: TProductController);
begin
  App.Post('/products',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      RoleMiddleware(Req, Res,
        procedure
        begin
          ProductController.AddItem(Req, Res);
        end, urAdmin);
    end);

  App.Put('/products/:id',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      RoleMiddleware(Req, Res,
        procedure
        begin
          ProductController.UpdateItem(Req, Res);
        end, urAdmin);
    end);

  App.Delete('/products/:id',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      RoleMiddleware(Req, Res,
        procedure
        begin
          ProductController.DeleteItem(Req, Res);
        end, urAdmin);
    end);
end;

procedure ConfigureStockOfficerRoutes(App: THorse; ProductController: TProductController);
begin
  App.Post('/products/:id/sell',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      RoleMiddleware(Req, Res,
        procedure
        begin
          ProductController.SellItem(Req, Res);
        end, urStockOfficer);
    end);
end;

procedure ConfigureProductRoutes(App: THorse; ProductController: TProductController);
begin
  App.Get('/products',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      ProductController.GetItems(Req, Res);
    end);

  App.Get('/products/:id',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      ProductController.GetItemById(Req, Res);
    end);

  App.Get('/notifications',
    procedure(Req: THorseRequest; Res: THorseResponse; Next: TProc)
    begin
      ProductController.GetNotifications(Req, Res);
    end);
end;

var
  App: THorse;
  AuthService: TAuthService;
  ProductService: TProductService;
  AuthController: TAuthController;
  ProductController: TProductController;
  DatabaseModule1: TDatabaseConnection;

begin
  try
    DatabaseModule1 := TDatabaseConnection.Create;
    try
      DatabaseModule1.Connect;

      App := THorse.Create;
      try
        AuthService := TAuthService.Create;
        ProductService := TProductService.Create;
        try
          AuthController := TAuthController.Create(AuthService);
          ProductController := TProductController.Create(ProductService);
          try
            // Configure Middleware
            App.Use(Jhonson);
            App.Use(CORS);

            // Configure Routes
            ConfigurePublicRoutes(App, AuthController);

            // Add Authentication Middleware for protected routes
            App.Use(AuthMiddleware);

            // Configure Protected Routes
            ConfigureUserRoutes(App, AuthController);
            ConfigureAdminRoutes(App, ProductController);
            ConfigureStockOfficerRoutes(App, ProductController);
            ConfigureProductRoutes(App, ProductController);

            WriteLn('Starting server on port 8080...');
            App.Listen(8080);
            WriteLn('Server is running on port 8080');
            WriteLn('Press Enter to stop...');
            ReadLn;

          finally
            ProductController.Free;
            AuthController.Free;
          end;
        finally
          ProductService.Free;
          AuthService.Free;
        end;
      finally
        App.Free;
      end;
    finally
      DatabaseModule1.Free;
    end;
  except
    on E: Exception do
    begin
      Writeln(E.ClassName, ': ', E.Message);
      Readln;
    end;
  end;
end.
