program StockManagementApi;
{$APPTYPE CONSOLE}

uses
  System.SysUtils,
  System.JSON,
  Horse,
  Horse.Jhonson,
  Horse.JWT,
  Horse.BasicAuthentication,
  Horse.CORS,
  FireDAC.Stan.Param,
  DatabaseModule in 'DatabaseModule.pas',
  UserModel in 'Models\UserModel.pas',
  ProductModel in 'Models\ProductModel.pas',
  UserService in 'Service\UserService.pas',
  ProductService in 'Service\ProductService.pas',
  UserController in 'Controller\UserController.pas',
  ProductController in 'Controller\ProductController.pas',
  JsonResponseHelper in 'Utils\JsonResponseHelper.pas',
  JWTManager in 'Utils\JWTManager.pas',
  CORSMiddleware in 'Middleware\CORSMiddleware.pas',
  NotificationModel in 'Models\NotificationModel.pas';

resourcestring
  ERR_UNAUTHORIZED = 'Unauthorized: Insufficient role permissions';
  ERR_INVALID_TOKEN = 'Invalid or expired token';

function CheckRole(const Req: THorseRequest; const RequiredRole: TUserRole): Boolean;
var
  Token: string;
  Claims: TJWTClaims;
begin
  Result := False;
  Token := Req.Headers['Authorization'];
  if Token.IsEmpty then
    Exit;

  if Token.StartsWith('Bearer ', True) then
    Token := Token.Substring(7);

  try
    if TJWTManager.ValidateToken(Token, Claims) then
    begin
      // Admin has access to everything
      Result := (Claims.Role = urAdmin) or (Claims.Role = RequiredRole);
    end;
  except
    Result := False;
  end;
end;

type
  TNextProc = TProc;

procedure RoleMiddleware(Req: THorseRequest; Res: THorseResponse; Next: TNextProc;
  RequiredRole: TUserRole);
begin
  if not CheckRole(Req, RequiredRole) then
  begin
    Res.Status(THTTPStatus.Forbidden);
    Res.Send<TJSONObject>(
      TJSONObject.Create.AddPair('error', ERR_UNAUTHORIZED));
    Exit;
  end;
  Next();
end;

procedure AuthMiddleware(Req: THorseRequest; Res: THorseResponse; Next: TNextProc);
var
  Token: string;
  Claims: TJWTClaims;
begin
  Token := Req.Headers['Authorization'];
  if Token.IsEmpty then
  begin
    Res.Status(THTTPStatus.Unauthorized);
    Res.Send<TJSONObject>(
      TJSONObject.Create.AddPair('error', ERR_INVALID_TOKEN));
    Exit;
  end;

  if Token.StartsWith('Bearer ', True) then
    Token := Token.Substring(7);

  try
    if not TJWTManager.ValidateToken(Token, Claims) then
    begin
      Res.Status(THTTPStatus.Unauthorized);
      Res.Send<TJSONObject>(
        TJSONObject.Create.AddPair('error', ERR_INVALID_TOKEN));
      Exit;
    end;
    Next();
  except
    Res.Status(THTTPStatus.Unauthorized);
    Res.Send<TJSONObject>(
      TJSONObject.Create.AddPair('error', ERR_INVALID_TOKEN));
  end;
end;

var
  App: THorse;
  AuthService: TAuthService;
  ProductService: TProductService;
  AuthController: TAuthController;
  ProductController: TProductController;
  DatabaseModule1: TDatabaseConnection;

begin
  try
    DatabaseModule1 := TDatabaseConnection.Create;
    try
      DatabaseModule1.Connect;

      App := THorse.Create;
      try
        AuthService := TAuthService.Create;
        ProductService := TProductService.Create;
        try
          AuthController := TAuthController.Create(AuthService);
          ProductController := TProductController.Create(ProductService);
          try
            // Middleware
            App.Use(Jhonson);
            App.Use(CORS);

            // Public Routes
            THorse.Post('/auth/register',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                AuthController.Register(Req, Res);
              end);

            THorse.Post('/auth/login',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                AuthController.Login(Req, Res);
              end);

            // Add Authentication Middleware for protected routes
            App.Use(AuthMiddleware);

            // Protected User Routes
            THorse.Get('/users/:id',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                AuthController.GetUserProfile(Req, Res);
              end);

            THorse.Put('/users/:id',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                AuthController.UpdateUserProfile(Req, Res);
              end);

            // Admin Routes
            THorse.Post('/products',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                RoleMiddleware(Req, Res,
                  procedure
                  begin
                    ProductController.AddItem(Req, Res);
                  end, urAdmin);
              end);

            THorse.Put('/products/:id',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                RoleMiddleware(Req, Res,
                  procedure
                  begin
                    ProductController.UpdateItem(Req, Res);
                  end, urAdmin);
              end);

            THorse.Delete('/products/:id',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                RoleMiddleware(Req, Res,
                  procedure
                  begin
                    ProductController.DeleteItem(Req, Res);
                  end, urAdmin);
              end);

            // Stock Officer Routes
            THorse.Post('/products/:id/sell',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                RoleMiddleware(Req, Res,
                  procedure
                  begin
                    ProductController.SellItem(Req, Res);
                  end, urStockOfficer);
              end);

            // Protected Product Routes
            THorse.Get('/products',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                ProductController.GetItems(Req, Res);
              end);

            THorse.Get('/products/:id',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                ProductController.GetItemById(Req, Res);
              end);

            THorse.Get('/notifications',
              procedure(Req: THorseRequest; Res: THorseResponse)
              begin
                ProductController.GetNotifications(Req, Res);
              end);

            WriteLn('Starting server on port 8080...');
            App.Listen(8080);
            WriteLn('Server is running on port 8080');
            WriteLn('Press Enter to stop...');
            ReadLn;

          finally
            ProductController.Free;
            AuthController.Free;
          end;
        finally
          ProductService.Free;
          AuthService.Free;
        end;
      finally
        App.Free;
      end;
    finally
      DatabaseModule1.Free;
    end;
  except
    on E: Exception do
    begin
      Writeln(E.ClassName, ': ', E.Message);
      Readln;
    end;
  end;
end.
